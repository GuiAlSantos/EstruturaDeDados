class HashTable:
    def _init_(self, size):
        self.size = size
        self.table = [None] * size

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        if self.table[index] is None:
            self.table[index] = [(key, value)]
        else:
            for i, (existing_key, existing_value) in enumerate(self.table[index]):
                if existing_key == key:
                    self.table[index][i] = (key, value)
                    return
            self.table[index].append((key, value))

    def search(self, key):
        index = self._hash(key)
        if self.table[index] is not None:
            for existing_key, existing_value in self.table[index]:
                if existing_key == key:
                    return existing_value
        return None

    def remove(self, key):
        index = self._hash(key)
        if self.table[index] is not None:
            for i, (existing_key, existing_value) in enumerate(self.table[index]):
                if existing_key == key:
                    del self.table[index][i]
                    return

hash_table = HashTable(10)

hash_table.insert("Python", "Linguagem de programação interpretada")
hash_table.insert("Java", "Linguagem de programação orientada a objetos")
hash_table.insert("C++", "Linguagem de programação de alto desempenho")

print(hash_table.search("Python"))  # Saída: Linguagem de programação interpretada
print(hash_table.search("JavaScript"))  # Saída: None

hash_table.remove("Java")
print(hash_table.search("Java"))
